function getCurrentPage() {
    return testframe().$.mobile.activePage;
}

function getSecurity() {
    var $ = testframe().$;
    var globalScope = $.mobile.globalScope();
    return globalScope.$service("security");
}

function openAktionen() {
    runs(function() {
        var currPage = getCurrentPage();
        var divs = currPage.find("div[class='ui-select']");
        var select = testframe().$(divs[0]).find("a");
        select.click();
    });
}

function selectAktion(menuId, label) {
    runs(function() {
        var currPage = getCurrentPage();
        var optionsUl = currPage.find("ul[id='" + menuId + "']");
        var $ = testframe().$;
        var links = $(optionsUl[0]).find("a");
        console.log(optionsUl);
        console.log(links);
        for (var i = 0; i< links.length; i++){
            var link = $(links[i]);
            var linktext = $.trim(link.text());
            console.log('#' + linktext + '#' + label + '#');

            if(linktext === label){
                 link.click();
            }
        };
    });
}

function findAktion(menuId, label) {
        var currPage = getCurrentPage();
        var optionsUl = currPage.find("ul[id='" + menuId + "']");
        var $ = testframe().$;
        var links = $(optionsUl[0]).find("a");
        console.log(optionsUl);
        console.log(links);
        for (var i = 0; i< links.length; i++){
            var link = $(links[i]);
            var linktext = $.trim(link.text());
            console.log('#' + linktext + '#' + label + '#');

            if(linktext === label){
                 return link;
            }
        };
        return undefined;
}

/**
 * Instruments the first call to the onActivate function of the given controller, so whenever
 * it is called it receives the remaining arguments that are given to this function.
 * @param controller
 * @param other passed to the onActivate function of the controller.
 */
function setOnActivateArguments(controller) {
    var oldOnActivate = controller.prototype.onActivate;
    var onActivateArgs = Array.prototype.slice.call(arguments, 1);
    var callCount = 0;
    controller.prototype.onActivate = function() {
        callCount++;
        if(callCount == 1){
        return oldOnActivate.apply(this, onActivateArgs);
        }else{
            return oldOnActivate.apply(this, arguments);
    }
}
}

function replacePrototypes(window, obj) {
    return window.JSON.parse(JSON.stringify(obj));
}

/**
 * Mocks the jquey ajax function to return the given result
 * when the given path is called.
 * This can be called multiple times without overriding the
 * previous calls.
 * @param window
 * @param path
 * @param success If the result is successful or not
 * @param data The data to return to the callback.
 */
function addXhrMock(window, path, success, data) {
    var xhrMock = window.xhrMock
    // This function is called from the test frame.
    // To ensure that the typeof operator works correct on arrays created in test functions
    // and used in the testframe,
    // we need to recreate arrays with the Array prototype of the testframe.
    data = replacePrototypes(window, data);
    if (!xhrMock) {
        var oldAjax = window.jQuery.ajax;
        xhrMock = spyOn(window.jQuery, 'ajax').andCallFake(function(url, options) {
            var result = xhrMock.results[url];
            console.log(url, result);
            if (result) {
                var res = $.Deferred();
                if (result.success) {
                    res.resolve(result.data);
                    if (options && options.success) {
                        options.success(result.data);
                    }
                } else {
                    res.reject(result.data);
                    if (options && options.error) {
                        options.error(result.data);
                    }
                }

                return res;
            } else {
                return oldAjax.apply(this, arguments);
            }
        });
        window.xhrMock = xhrMock;
        xhrMock.results = {};
    }
    xhrMock.results[path] = { success: success, data: data };
}

function createUserMock(window, user, authorities) {
    addXhrMock(window, 'rest/authentication/user', true, {user: user, authorities: authorities})
}

function login(username, password) {
    var finished = false;
    runs(function() {
        getSecurity().login(username, password, function() {
            finished = true;
        });
    });
    waitsFor(function() {
        return finished;
    });
}

function logout() {
    var finished = false;
    runs(function() {
        getSecurity().login(username, password, function(success) {
            finished = true;
        });
    });
    waitsFor(function() {
        return finished;
    });
}
